@page "/"
@using Timely.Services.Data
@using Timely.Models

<MudStack class="p-4 flex w-full h-full">
    @if (_tabControl is not null)
    {
        if (_tabControl.ActivePanelIndex == 0)
        {
            @if (_shiftStarted)
            {
                <MudPaper Elevation="0" Class="rounded-lg bg-[--mud-palette-primary]">
                    <MudStack Spacing="0" Class="m-4">
                        <MudText Class="text-xl font-medium text-white mx-auto">@_currentTime.ToString("dddd, MMMM dd - hh\\:mm\\:ss tt")</MudText>
                        <MudText Class="text-5xl mt-4 md:text-6xl font-bold text-white mx-auto">@((DateTime.Now - _currentShift.ShiftStart).ToString(@"hh\:mm\:ss"))</MudText>
                        <MudText Class="mt-4 text-2xl font-bold text-[--mud-palette-primary] mx-auto bg-white p-2 px-4 rounded-lg">Shift Ongoing</MudText>
                    </MudStack>
                </MudPaper>
            }
            else
            {
                <MudPaper Elevation="0" Class="rounded-lg bg-[#f3f2fc]">
                    <MudStack Spacing="0" Class="m-4">
                        <MudText Class="text-xl font-medium text-[--mud-palette-primary] mx-auto">@_currentTime.ToString("dddd, MMMM dd")</MudText>
                        <MudText Class="text-5xl mt-4 md:text-6xl font-bold text-[--mud-palette-primary] mx-auto">@_currentTime.ToString("T")</MudText>
                        <MudText Class="mt-4 text-2xl font-bold text-[--mud-palette-primary] mx-auto p-2">Shift Not Started</MudText>
                    </MudStack>
                </MudPaper>
            }

            <MudStack Class="flex h-full w-full">
                @if (_shiftStarted)
                {
                    <MudButton OnClick="@EndShift" Color="Color.Inherit" Variant="Variant.Filled" DisableElevation="true" Class="bg-[#f3f2fc] m-auto w-48 h-48 rounded-full">
                        <MudStack Class="flex" Spacing="1">
                            <MudIcon Class="mx-auto w-14 h-14 text-[--mud-palette-primary]" Icon="@Icons.Material.Rounded.TimerOff"/>
                            <MudStack Spacing="0">
                                <MudText Typo="Typo.h5" Class="font-medium text-[--mud-palette-primary]">End Shift</MudText>
                            </MudStack>
                        </MudStack>
                    </MudButton>
                }
                else
                {
                    <MudButton OnClick="@StartShift" Color="Color.Primary" Variant="Variant.Filled" DisableElevation="true" Class="m-auto w-48 h-48 rounded-full">
                        <MudStack Class="flex" Spacing="1">
                            <MudIcon Class="mx-auto w-14 h-14" Icon="@Icons.Material.Rounded.Timer"/>
                            <MudStack Spacing="0">
                                <MudText Typo="Typo.h5" Class="font-medium">Start Shift</MudText>
                            </MudStack>
                        </MudStack>
                    </MudButton>
                }
            </MudStack>
        }

        if (_tabControl.ActivePanelIndex == 1)
        {
            if (_timeRecords is not null)
            {
                <MudButton OnClick="@ClearRecords" StartIcon="@Icons.Material.Rounded.Delete" Color="Color.Primary" Variant="Variant.Text" DisableElevation="true" >
                    <MudText Class="text-xl font-medium">Clear Records</MudText>
                </MudButton>
            }
            <div class="h-full overflow-y-auto">
                <MudStack Class="flex h-full w-full">
                    @if (_timeRecords is not null)
                    {
                        foreach (var shift in _timeRecords)
                        {
                            <TimeRecord Shift="shift"/>
                        }
                    }
                </MudStack>
            </div>
        }
    }
    <MudSpacer/>
    <MudTabs @ref="@_tabControl" ActivePanelIndexChanged="@(() => StateHasChanged())" Class="flex w-full" Position="Position.Bottom" Color="Color.Primary" Centered="true" Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="m-0 p-0">
        <MudTabPanel Icon="@Icons.Material.Rounded.Timer" Text="Tracker"/>
        <MudTabPanel Icon="@Icons.Material.Rounded.List" Text="Records"/>
    </MudTabs>
</MudStack>

@inject ShiftManager ShiftManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@code
{
    private bool _shiftStarted;
    private Shift? _currentShift;
    private MudTabs? _tabControl;
    private DateTime _currentTime = DateTime.Now;

    private LinkedList<Shift>? _timeRecords = new();

    protected override async Task OnInitializedAsync()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        await ShiftManager.GetDataFromLocalStorage();

        _timeRecords = await ShiftManager.GetTimeRecords();
        _currentShift = await ShiftManager.GetCurrentShift();

        if (_currentShift is not null)
        {
            _shiftStarted = true;
        }

        Task.Run(async () =>
        {
            while (true)
            {
                _currentTime = DateTime.Now;
                StateHasChanged();
                await Task.Delay(TimeSpan.FromSeconds(1));
            }
        });
    }

    async Task StartShift()
    {
        _currentShift = new Shift
        {
            ShiftStart = DateTime.Now
        };

        await ShiftManager.StartShift();
        _shiftStarted = true;

        Snackbar.Add("Shift started");
    }

    async Task EndShift()
    {
        await ShiftManager.EndShift();
        _shiftStarted = false;
        _timeRecords = await ShiftManager.GetTimeRecords();
        Snackbar.Add("Shift ended, record saved");
    }

    async Task ClearRecords()
    {
        var result = await DialogService.ShowMessageBox("Clear Time Records", "This action cannot be undone, continue?");

        if (result is null || !result.Value)
        {
            return;
        }

        await ShiftManager.ClearTimeRecords();
        await ShiftManager.GetDataFromLocalStorage();
        _timeRecords = await ShiftManager.GetTimeRecords();
        Snackbar.Add("Time records cleared");
    }

}