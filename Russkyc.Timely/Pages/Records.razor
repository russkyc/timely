@using BlazorComponentBus
@using Blazored.LocalStorage
@using FileDownloadBlazor
@using Magic.IndexedDb
@using QuestPDF.Drawing
@using QuestPDF.Fluent
@using QuestPDF.Infrastructure
@using Russkyc.Timely.Models.Constants
@using Russkyc.Timely.Models.Entities
@using Russkyc.Timely.Models.Events
@using Russkyc.Timely.Utilities
@using Size = MudBlazor.Size

<MudStack Spacing="4" Class="grow min-h-full flex flex-col">
    <MudText Class="text-2xl font-black">Records</MudText>
    <MudPaper Elevation="1" Class="rounded-lg bg-[var(--mud-palette-primary)] text-white">
        <MudStack Row="true" Spacing="0" Class="flex flex-row">
            <MudIconButton OnClick="@DecrementMonth" Size="Size.Large" Class="p-2 text-white"
                           Icon="@Icons.Material.Rounded.ChevronLeft"/>
            <MudSpacer/>
            <MudText Class="text-xl my-auto font-bold">@(_currentTimestamp.ToString("MMMM"))</MudText>
            <MudSpacer/>
            <MudIconButton OnClick="@IncrementMonth" Size="Size.Large" Class="p-2 text-white"
                           Icon="@Icons.Material.Rounded.ChevronRight"/>
        </MudStack>
    </MudPaper>
    <MudItem Class="flex flex-col">
        <MudButton OnClick="@ExpandSummary" DropShadow="false" Size="Size.Large" Color="Color.Primary"
                   Variant="Variant.Text">
            @if (!_summaryExpanded)
            {
                <MudText Class="font-medium text-center">Show Timesheet Summary</MudText>
            }
            else
            {
                <MudText Class="font-medium text-center">Hide Timesheet Summary</MudText>
            }
        </MudButton>
        <MudCollapse @bind-Expanded="@_summaryExpanded">
            <MudGrid Spacing="4" Class="mt-1">
                <MudItem xs="6">
                    <MudPaper Elevation="0" Class="p-4 rounded-lg bg-[var(--mud-palette-primary)] text-white">
                        <MudStack Class="my-auto" Spacing="0">
                            <MudText Class="opacity-75">Total Hours</MudText>
                            @if (GetTotalWorkHours().hours > 0)
                            {
                                <MudText
                                    Class="text-2xl font-medium">@GetTotalWorkHours().hours.ToString("00")</MudText>
                            }
                            else
                            {
                                <MudText Class="text-2xl font-medium">- -</MudText>
                            }
                        </MudStack>
                    </MudPaper>
                </MudItem>
                <MudItem xs="6">
                    <MudPaper Elevation="0" Class="p-4 rounded-lg bg-[var(--mud-palette-primary)] text-white">
                        <MudStack Class="my-auto" Spacing="0">
                            <MudText Class="opacity-75">Total Minutes</MudText>
                            @if (GetTotalWorkHours().minutes > 0)
                            {
                                <MudText
                                    Class="text-2xl font-medium">@GetTotalWorkHours().minutes.ToString("00")</MudText>
                            }
                            else
                            {
                                <MudText Class="text-2xl font-medium">- -</MudText>
                            }
                        </MudStack>
                    </MudPaper>
                </MudItem>
                <MudItem xs="6">
                    <MudPaper Elevation="0" Class="p-4 rounded-lg bg-[var(--mud-palette-primary)] text-white">
                        <MudStack Class="my-auto" Spacing="0">
                            <MudText Class="opacity-75">Under Hours</MudText>
                            <MudText Class="text-2xl font-medium">- -</MudText>
                        </MudStack>
                    </MudPaper>
                </MudItem>
                <MudItem xs="6">
                    <MudPaper Elevation="0" Class="p-4 rounded-lg bg-[var(--mud-palette-primary)] text-white">
                        <MudStack Class="my-auto" Spacing="0">
                            <MudText Class="text-md opacity-75">Under Minutes</MudText>
                            <MudText Class="text-2xl font-medium">- -</MudText>
                        </MudStack>
                    </MudPaper>
                </MudItem>
                @if (_timeEntries.Any() )
                {
                    <MudItem xs="12">
                        <MudButton Disabled="@(!_canExport)" OnClick="@PrintTimesheet" DropShadow="false" Size="Size.Large"
                                   Color="Color.Primary" Variant="Variant.Filled" FullWidth="true">
                            <MudText Class="font-medium text-lg">Export DTR for @(_currentTimestamp.ToString("MMMM"))</MudText>
                        </MudButton>
                    </MudItem>
                }
            </MudGrid>
        </MudCollapse>
    </MudItem>
    <MudText Class="text-xl font-medium">Timesheet</MudText>
    <MudItem Class="grow h-0 min-h-full overflow-y-auto">
        <MudStack Spacing="3">
            @foreach (var timeEntry in _timeEntries)
            {
                <TimeEntryCard TimeEntry="@timeEntry"/>
            }
        </MudStack>
    </MudItem>
</MudStack>

@inject ComponentBus Bus
@inject IFileDownloader Downloader
@inject ISyncLocalStorageService LocalStorage

@code {

    private bool _canExport;
    private bool _summaryExpanded;
    private DateTime _currentTimestamp;
    private IEnumerable<TimeEntry> _timeEntries = [];

    [CascadingParameter] IndexedDbManager IndexedDbManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _currentTimestamp = DateTime.Today;

        if (LocalStorage.ContainKey(StringValues.ClockedInStoreId))
        {
            var clockedIn = LocalStorage.GetItem<bool>(StringValues.ClockedInStoreId);
            _canExport = !clockedIn;
        }
        else
        {
            _canExport = true;
        }

        Bus.Subscribe<SetClockedInEvent>(OnClockedInHandler);
        Bus.Subscribe<ClearedDataEvent>(OnDataClearedHandler);
        Bus.Subscribe<UpdateRecordsEvent>(OnUpdateRecordsHandler);

        await GetTimesheetRecords();
    }

    private async Task OnClockedInHandler(MessageArgs message, CancellationToken token)
    {
        var messageValue = message.GetMessage<SetClockedInEvent>();
        _canExport = !messageValue.ClockedIn;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnUpdateRecordsHandler(MessageArgs message, CancellationToken token)
    {
        await GetTimesheetRecords();
    }

    private async Task OnDataClearedHandler(MessageArgs message, CancellationToken token)
    {
        await GetTimesheetRecords();
    }

    async Task DecrementMonth()
    {
        if (_currentTimestamp.Month == 1) return;
        _currentTimestamp = _currentTimestamp.AddMonths(-1);

        await GetTimesheetRecords();
    }

    async Task IncrementMonth()
    {
        if (_currentTimestamp.Month == 12) return;
        _currentTimestamp = _currentTimestamp.AddMonths(1);

        await GetTimesheetRecords();
    }

    (int hours, int minutes) GetTotalWorkHours()
    {
        if (!_timeEntries.Any()) return (0, 0);

        var workHours = _timeEntries.Sum(timeEntry => timeEntry.GetWorkHours().hours);
        var workMinutes = _timeEntries.Sum(timeEntry => timeEntry.GetWorkHours().minutes);

        if (workMinutes > 59)
        {
            var hoursOverflow = workMinutes / 60;
            workHours += hoursOverflow;

            var minutesOverflow = workMinutes % 60;
            workMinutes = minutesOverflow;
        }

        return (workHours, workMinutes);
    }

    async Task GetTimesheetRecords()
    {
        var timeEntries = await IndexedDbManager.GetAll<TimeEntry>();

        _timeEntries = timeEntries.Where(
            timeEntry => timeEntry.Year == _currentTimestamp.Year
                         && timeEntry.Month == _currentTimestamp.Month);

        await InvokeAsync(StateHasChanged);
    }

    void ExpandSummary()
    {
        _summaryExpanded = !_summaryExpanded;
    }

    private async Task PrintTimesheet()
    {
        var pdfDoc = DocumentTool.GenerateDateTimeRecord(_timeEntries, _currentTimestamp);
        // saving document as image
        //var base64PngImageString = Convert.ToBase64String(document.GeneratePdf());

        var currentTimestamp = DateTime.Now;
        await Downloader.DownloadAsync(pdfDoc, $"{currentTimestamp:MMddyy-hhmmss}-timely_dtr_sheet-{_currentTimestamp:MMMM}.pdf".ToLower());
    }

}